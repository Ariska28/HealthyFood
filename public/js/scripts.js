"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){"function"==typeof define&&define.amd?define("scripts",e):e()}(function(){var o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function e(e,t){return e(t={exports:{}},t.exports),t.exports}var t,r=e(function(e){var t,r;t=o,r=function(){function b(e,t,r){if(r){var o=document.createDocumentFragment(),l=!t.hasAttribute("viewBox")&&r.getAttribute("viewBox");l&&t.setAttribute("viewBox",l);for(var n=r.cloneNode(!0);n.childNodes.length;)o.appendChild(n.firstChild);e.appendChild(o)}}function v(o){o.onreadystatechange=function(){if(4===o.readyState){var r=o._cachedDocument;r||((r=o._cachedDocument=document.implementation.createHTMLDocument("")).body.innerHTML=o.responseText,o._cachedTarget={}),o._embeds.splice(0).map(function(e){var t=o._cachedTarget[e.id];t=t||(o._cachedTarget[e.id]=r.getElementById(e.id)),b(e.parent,e.svg,t)})}},o.onreadystatechange()}function m(e){for(var t=e;"svg"!==t.nodeName.toLowerCase()&&(t=t.parentNode););return t}return function(e){var d,s=Object(e),t=window.top!==window.self;d="polyfill"in s?s.polyfill:/\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/.test(navigator.userAgent)||(navigator.userAgent.match(/\bEdge\/12\.(\d+)\b/)||[])[1]<10547||(navigator.userAgent.match(/\bAppleWebKit\/(\d+)\b/)||[])[1]<537||/\bEdge\/.(\d+)\b/.test(navigator.userAgent)&&t;var f={},p=window.requestAnimationFrame||setTimeout,g=document.getElementsByTagName("use"),h=0;d&&function e(){for(var t=0;t<g.length;){var r=g[t],o=r.parentNode,l=m(o),n=r.getAttribute("xlink:href")||r.getAttribute("href");if(!n&&s.attributeName&&(n=r.getAttribute(s.attributeName)),l&&n){if(d)if(!s.validate||s.validate(n,l,r)){o.removeChild(r);var i=n.split("#"),a=i.shift(),c=i.join("#");if(a.length){var u=f[a];u||((u=f[a]=new XMLHttpRequest).open("GET",a),u.send(),u._embeds=[]),u._embeds.push({parent:o,svg:l,id:c}),v(u)}else b(o,l,document.getElementById(c))}else++t,++h}else++t}(!g.length||0<g.length-h)&&p(e,67)}()}},e.exports?e.exports=r():t.svg4everybody=r()}),l=e(function(e,t){var r;r=function(){return o={},l.m=r=[function(e,t,r){r.r(t);function o(e){return Array.isArray(e)?e:[e]}function c(e){return e instanceof Node}function l(e,t){if(e&&t){e=e instanceof NodeList?e:[e];for(var r=0;r<e.length&&!0!==t(e[r],r,e.length);r++);}}function n(e){return console.error("[scroll-lock] ".concat(e))}function b(e){if(Array.isArray(e))return e.join(", ")}function i(e){var t=[];return l(e,function(e){return t.push(e)}),t}function v(e,t,r,o){var l=3<arguments.length&&void 0!==o?o:document;if((!(2<arguments.length&&void 0!==r)||r)&&-1!==i(l.querySelectorAll(t)).indexOf(e))return e;for(;(e=e.parentElement)&&-1===i(l.querySelectorAll(t)).indexOf(e););return e}function m(e,t,r){var o=2<arguments.length&&void 0!==r?r:document;return-1!==i(o.querySelectorAll(t)).indexOf(e)}function a(e){return e&&"hidden"===getComputedStyle(e).overflow}function y(e){return e&&(!!a(e)||e.scrollTop<=0)}function S(e){if(e){if(a(e))return 1;var t=e.scrollTop;return e.scrollHeight<=t+e.offsetHeight}}function w(e){return e&&(!!a(e)||e.scrollLeft<=0)}function k(e){if(e){if(a(e))return 1;var t=e.scrollLeft;return e.scrollWidth<=t+e.offsetWidth}}function u(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.d(t,"disablePageScroll",function(){return s}),r.d(t,"enablePageScroll",function(){return f}),r.d(t,"getScrollState",function(){return p}),r.d(t,"clearQueueScrollLocks",function(){return g}),r.d(t,"getTargetScrollBarWidth",function(){return h}),r.d(t,"getCurrentTargetScrollBarWidth",function(){return T}),r.d(t,"getPageScrollBarWidth",function(){return x}),r.d(t,"getCurrentPageScrollBarWidth",function(){return E}),r.d(t,"addScrollableTarget",function(){return L}),r.d(t,"removeScrollableTarget",function(){return G}),r.d(t,"addScrollableSelector",function(){return F}),r.d(t,"removeScrollableSelector",function(){return W}),r.d(t,"addLockableTarget",function(){return q}),r.d(t,"addLockableSelector",function(){return O}),r.d(t,"setFillGapMethod",function(){return P}),r.d(t,"addFillGapTarget",function(){return M}),r.d(t,"removeFillGapTarget",function(){return Y}),r.d(t,"addFillGapSelector",function(){return j}),r.d(t,"removeFillGapSelector",function(){return _}),r.d(t,"refillGaps",function(){return B});var d=["padding","margin","width","max-width","none"],A={scroll:!0,queue:0,scrollableSelectors:["[data-scroll-lock-scrollable]"],lockableSelectors:["body","[data-scroll-lock-lockable]"],fillGapSelectors:["body","[data-scroll-lock-fill-gap]","[data-scroll-lock-lockable]"],fillGapMethod:d[0],startTouchY:0,startTouchX:0},s=function(e){A.queue<=0&&(A.scroll=!1,N(),X()),L(e),A.queue++},f=function(e){0<A.queue&&A.queue--,A.queue<=0&&(A.scroll=!0,C(),H()),G(e)},p=function(){return A.scroll},g=function(){A.queue=0},h=function(e,t){var r=1<arguments.length&&void 0!==t&&t;if(c(e)){var o=e.style.overflowY;r?p()||(e.style.overflowY=e.getAttribute("data-scroll-lock-saved-overflow-y-property")):e.style.overflowY="scroll";var l=T(e);return e.style.overflowY=o,l}return 0},T=function(e){if(c(e)){if(e===document.body){var t=document.documentElement.clientWidth;return window.innerWidth-t}var r=e.style.borderLeftWidth,o=e.style.borderRightWidth;e.style.borderLeftWidth="0px",e.style.borderRightWidth="0px";var l=e.offsetWidth-e.clientWidth;return e.style.borderLeftWidth=r,e.style.borderRightWidth=o,l}return 0},x=function(e){var t=0<arguments.length&&void 0!==e&&e;return h(document.body,t)},E=function(){return T(document.body)},L=function(e){e&&o(e).map(function(e){l(e,function(e){c(e)?e.setAttribute("data-scroll-lock-scrollable",""):n('"'.concat(e,'" is not a Element.'))})})},G=function(e){e&&o(e).map(function(e){l(e,function(e){c(e)?e.removeAttribute("data-scroll-lock-scrollable"):n('"'.concat(e,'" is not a Element.'))})})},F=function(e){e&&o(e).map(function(e){A.scrollableSelectors.push(e)})},W=function(e){e&&o(e).map(function(t){A.scrollableSelectors=A.scrollableSelectors.filter(function(e){return e!==t})})},q=function(e){e&&(o(e).map(function(e){l(e,function(e){c(e)?e.setAttribute("data-scroll-lock-lockable",""):n('"'.concat(e,'" is not a Element.'))})}),p()||N())},O=function(e){e&&(o(e).map(function(e){A.lockableSelectors.push(e)}),p()||N(),j(e))},P=function(e){if(e)if(-1!==d.indexOf(e))A.fillGapMethod=e,B();else{var t=d.join(", ");n('"'.concat(e,'" method is not available!\nAvailable fill gap methods: ').concat(t,"."))}},M=function(e){e&&o(e).map(function(e){l(e,function(e){c(e)?(e.setAttribute("data-scroll-lock-fill-gap",""),A.scroll||Q(e)):n('"'.concat(e,'" is not a Element.'))})})},Y=function(e){e&&o(e).map(function(e){l(e,function(e){c(e)?(e.removeAttribute("data-scroll-lock-fill-gap"),A.scroll||J(e)):n('"'.concat(e,'" is not a Element.'))})})},j=function(e){e&&o(e).map(function(e){-1===A.fillGapSelectors.indexOf(e)&&(A.fillGapSelectors.push(e),A.scroll||I(e))})},_=function(e){e&&o(e).map(function(t){A.fillGapSelectors=A.fillGapSelectors.filter(function(e){return e!==t}),A.scroll||z(t)})},B=function(){A.scroll||X()},N=function(){var e=b(A.lockableSelectors);R(e)},C=function(){var e=b(A.lockableSelectors);U(e)},R=function(e){var t=document.querySelectorAll(e);l(t,function(e){K(e)})},U=function(e){var t=document.querySelectorAll(e);l(t,function(e){D(e)})},K=function(e){if(c(e)&&"true"!==e.getAttribute("data-scroll-lock-locked")){var t=window.getComputedStyle(e);e.setAttribute("data-scroll-lock-saved-overflow-y-property",t.overflowY),e.setAttribute("data-scroll-lock-saved-inline-overflow-property",e.style.overflow),e.setAttribute("data-scroll-lock-saved-inline-overflow-y-property",e.style.overflowY),e.style.overflow="hidden",e.setAttribute("data-scroll-lock-locked","true")}},D=function(e){c(e)&&"true"===e.getAttribute("data-scroll-lock-locked")&&(e.style.overflow=e.getAttribute("data-scroll-lock-saved-inline-overflow-property"),e.style.overflowY=e.getAttribute("data-scroll-lock-saved-inline-overflow-y-property"),e.removeAttribute("data-scroll-lock-saved-overflow-property"),e.removeAttribute("data-scroll-lock-saved-inline-overflow-property"),e.removeAttribute("data-scroll-lock-saved-inline-overflow-y-property"),e.removeAttribute("data-scroll-lock-locked"))},X=function(){A.fillGapSelectors.map(function(e){I(e)})},H=function(){A.fillGapSelectors.map(function(e){z(e)})},I=function(e){var t=document.querySelectorAll(e),r=-1!==A.lockableSelectors.indexOf(e);l(t,function(e){Q(e,r)})},Q=function(e,t){var r=1<arguments.length&&void 0!==t&&t;if(c(e)){var o;if(""===e.getAttribute("data-scroll-lock-lockable")||r)o=h(e,!0);else{var l=v(e,b(A.lockableSelectors));o=h(l,!0)}"true"===e.getAttribute("data-scroll-lock-filled-gap")&&J(e);var n=window.getComputedStyle(e);if(e.setAttribute("data-scroll-lock-filled-gap","true"),e.setAttribute("data-scroll-lock-current-fill-gap-method",A.fillGapMethod),"margin"===A.fillGapMethod){var i=parseFloat(n.marginRight);e.style.marginRight="".concat(i+o,"px")}else if("width"===A.fillGapMethod)e.style.width="calc(100% - ".concat(o,"px)");else if("max-width"===A.fillGapMethod)e.style.maxWidth="calc(100% - ".concat(o,"px)");else if("padding"===A.fillGapMethod){var a=parseFloat(n.paddingRight);e.style.paddingRight="".concat(a+o,"px")}}},z=function(e){var t=document.querySelectorAll(e);l(t,function(e){J(e)})},J=function(e){if(c(e)&&"true"===e.getAttribute("data-scroll-lock-filled-gap")){var t=e.getAttribute("data-scroll-lock-current-fill-gap-method");e.removeAttribute("data-scroll-lock-filled-gap"),e.removeAttribute("data-scroll-lock-current-fill-gap-method"),"margin"===t?e.style.marginRight="":"width"===t?e.style.width="":"max-width"===t?e.style.maxWidth="":"padding"===t&&(e.style.paddingRight="")}};"undefined"!=typeof window&&window.addEventListener("resize",function(){B()}),"undefined"!=typeof document&&(document.addEventListener("touchstart",function(e){A.scroll||(A.startTouchY=e.touches[0].clientY,A.startTouchX=e.touches[0].clientX)}),document.addEventListener("touchmove",function(i){if(!A.scroll){var e=A.startTouchY,t=A.startTouchX,r=i.touches[0].clientY,o=i.touches[0].clientX;if(i.touches.length<2){var a=b(A.scrollableSelectors),c=e<r,u=r<e,d=t<o,s=o<t,f=e+3<r,p=r<e-3,g=t+3<o,h=o<t-3;!function e(t,r){var o=1<arguments.length&&void 0!==r&&r;if(t){var l=v(t,a,!1);if(m(t,'input[type="range"]'))return!1;if(o||m(t,'textarea, [contenteditable="true"]')&&v(t,a)||m(t,a)){var n=!1;w(t)&&k(t)?(c&&y(t)||u&&S(t))&&(n=!0):y(t)&&S(t)?(d&&w(t)||s&&k(t))&&(n=!0):(f&&y(t)||p&&S(t)||g&&w(t)||h&&k(t))&&(n=!0),n&&(l?e(l,!0):i.preventDefault())}else e(l)}else i.preventDefault()}(i.target)}}},{passive:!1}),document.addEventListener("touchend",function(){A.scroll||(A.startTouchY=0,A.startTouchX=0)}));var V={hide:function(e){n('"hide" is deprecated! Use "disablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#disablepagescrollscrollabletarget'),s(e)},show:function(e){n('"show" is deprecated! Use "enablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#enablepagescrollscrollabletarget'),f(e)},toggle:function(e){n('"toggle" is deprecated! Do not use it.'),p()?s():f(e)},getState:function(){return n('"getState" is deprecated! Use "getScrollState" instead. \n https://github.com/FL3NKEY/scroll-lock#getscrollstate'),p()},getWidth:function(){return n('"getWidth" is deprecated! Use "getPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getpagescrollbarwidth'),x()},getCurrentWidth:function(){return n('"getCurrentWidth" is deprecated! Use "getCurrentPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getcurrentpagescrollbarwidth'),E()},setScrollableTargets:function(e){n('"setScrollableTargets" is deprecated! Use "addScrollableTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addscrollabletargetscrollabletarget'),L(e)},setFillGapSelectors:function(e){n('"setFillGapSelectors" is deprecated! Use "addFillGapSelector" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgapselectorfillgapselector'),j(e)},setFillGapTargets:function(e){n('"setFillGapTargets" is deprecated! Use "addFillGapTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgaptargetfillgaptarget'),M(e)},clearQueue:function(){n('"clearQueue" is deprecated! Use "clearQueueScrollLocks" instead. \n https://github.com/FL3NKEY/scroll-lock#clearqueuescrolllocks'),g()}},Z=function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{},o=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),o.forEach(function(e){u(t,e,r[e])})}return t}({disablePageScroll:s,enablePageScroll:f,getScrollState:p,clearQueueScrollLocks:g,getTargetScrollBarWidth:h,getCurrentTargetScrollBarWidth:T,getPageScrollBarWidth:x,getCurrentPageScrollBarWidth:E,addScrollableSelector:F,removeScrollableSelector:W,addScrollableTarget:L,removeScrollableTarget:G,addLockableSelector:O,addLockableTarget:q,addFillGapSelector:j,removeFillGapSelector:_,addFillGapTarget:M,removeFillGapTarget:Y,setFillGapMethod:P,refillGaps:B,_state:A},V);t.default=Z}],l.c=o,l.d=function(e,t,r){l.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},l.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.t=function(t,e){if(1&e&&(t=l(t)),8&e)return t;if(4&e&&"object"===_typeof(t)&&t&&t.__esModule)return t;var r=Object.create(null);if(l.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)l.d(r,o,function(e){return t[e]}.bind(null,o));return r},l.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(t,"a",t),t},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},l.p="",l(l.s=0).default;function l(e){if(o[e])return o[e].exports;var t=o[e]={i:e,l:!1,exports:{}};return r[e].call(t.exports,t,t.exports,l),t.l=!0,t.exports}var r,o},e.exports=r()}),n=(t=l)&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t;function i(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var a=function(){function r(e){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,r),this.container=e,this.triggerBtn=this.container.querySelector("[data-test-api]"),this.requestResult=this.container.querySelector("[data-test-result]"),this.requestUrl=this.triggerBtn.dataset.testApi,this.triggerBtn.addEventListener("click",function(e){t.requestResponse()})}var e,t,o;return e=r,(t=[{key:"requestResponse",value:function(){var t=this;fetch(this.requestUrl).then(function(e){return e.json()}).then(function(e){e&&(t.requestResult.innerHTML=e.title+e.message)})}}])&&i(e.prototype,t),o&&i(e,o),r}();r(),window.app={header:null,scroll:{disable:n.disablePageScroll,enable:n.enablePageScroll},setInert:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach(function(e){e.setAttribute("inert",!0)})},removeInert:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach(function(e){e.removeAttribute("inert")})},initModule:function(t,e){e?Array.prototype.slice.call(document.querySelectorAll(e)).forEach(function(e){new t(e)}):new t},init:function(){app.initModule(a,".js-test-api")}},window.addEventListener("DOMContentLoaded",app.init)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
